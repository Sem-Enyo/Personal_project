# -*- coding: utf-8 -*-
"""Module_7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z0Ik0uMxOtLUCIoINWkaKQ2vZByIAdfC
"""

import math

list=[math.sqrt(x+1) for x in range(9)]
list

list_1=[x for x in range(2,100,2) if x%9==0 ]
list_1

#time-series of NDVI (Normalized Difference Vegetation Index) data.
#NDVI is a common vegetation index derived from satellite data 
#NDVI range from -1 to +1 with high values for high biomass
#The goal was to remove outliers by computing the median of NDVI in a window covering 7 time-periods
#Using the moving window to remove outliers by replacing them with the median of the window

file=open('Abisko.txt', 'r')  # Reading data in a text file

#Appending the values into a list
NDVI=[]
for line in file:
  line=line.split(', ')
  NDVI.append(line)
NDVI

len()

list=[]
p=NDVI[0]
for i in p:
  i=i.split(',')
  list.append(i)
list

#Removing the first 3 values which are IDs
list_1=[]
for i in range(3,len(list[0])):
  x=list[0][i]
  x=float(x)
  list_1.append(x)

import statistics

import copy

nd=copy.deepcopy(list_1) #making a copy of the data

#If the NDVI value in the middle of the moving window is <75% of the median
#or >125% of the median of the entire window it is considered an 
#outlier. In this case you replace the value with the median. 

for i in range(0, len(list_1)-6):
  y= statistics.median(list_1[i:i+7])
  x= list_1[i+3]

  if (0.75*y)> x or (1.25*y)<x:
   nd[i+3]=y
nd[:20]

#converting the first and last 3 values to zero since the moving window did not affcet them
for i in range(3): 
  nd[i]=0

for i in range(4):
  nd[i-3]=0
nd[-3]

import matplotlib.pyplot as plt

#plotting the cleaned NDVI and the original data to visualise the changes
plt.figure(figsize=(20, 8))
plt.plot(list_1, color='red', label='Original_NDVI')
plt.plot(nd,color='grey', label='Cleaned_NDVI')
plt.xlabel('Time (8-day period)')
plt.ylabel('NDVI (Scaled)')
plt.title('Original NDVI and Cleaned NDVI with outliers removed')
plt.legend()

plt.savefig("output.jpg", dpi=100)
plt.show()